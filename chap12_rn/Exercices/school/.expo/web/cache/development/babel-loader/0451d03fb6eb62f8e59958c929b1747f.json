{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_STUDENT, INCREMENT_ATTENDANCE, DECREMENT_ATTENDANCE, TOGGLE_ORDER_NOTES, RESET, SET_BEHAVIOURS } from \"../constants/actions\";\nexport var get_student = function get_student(payload) {\n  return {\n    type: GET_STUDENT,\n    payload: payload\n  };\n};\nexport var increment_attendance = function increment_attendance(payload) {\n  return {\n    type: INCREMENT_ATTENDANCE,\n    payload: payload\n  };\n};\nexport var decrement_attendance = function decrement_attendance(payload) {\n  return {\n    type: DECREMENT_ATTENDANCE,\n    payload: payload\n  };\n};\nexport var reset = function reset() {\n  return {\n    type: RESET\n  };\n};\nexport var order_notes = function order_notes() {\n  return {\n    type: TOGGLE_ORDER_NOTES\n  };\n};\nexport var set_behaviours = function set_behaviours() {\n  return {\n    type: SET_BEHAVIOURS\n  };\n};\n\nvar average = function average(notes) {\n  var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  if (notes.length === 0) return null;\n  return Math.floor(notes.reduce(function (curr, acc) {\n    return curr + acc;\n  }) / notes.length * decimal) / decimal;\n};\n\nvar deepCopyStudents = function deepCopyStudents(state) {\n  return state.students.map(function (s) {\n    return _objectSpread(_objectSpread({}, s), {}, {\n      notes: _toConsumableArray(s.notes)\n    });\n  });\n};\n\nvar setMention = function setMention(attentance) {\n  switch (true) {\n    case attentance === 0:\n      return 'A';\n\n    case attentance >= 1 && attentance <= 2:\n      return 'B';\n\n    case attentance >= 3 && attentance <= 5:\n      return 'C';\n\n    default:\n      return 'D';\n  }\n};\n\nvar getMention = function getMention(student, behaviors) {\n  var _behaviors$get;\n\n  return (_behaviors$get = behaviors.get(student.id)) != null ? _behaviors$get : student.attendance === 0 ? 'A' : 'Aucune mention';\n};\n\nexport { average, deepCopyStudents, setMention, getMention };","map":{"version":3,"sources":["/Users/antoinelucsko/Desktop/COURS/3WA/Pro10_react/chap12_rn/Exercices/school/actions/actions-types.js"],"names":["GET_STUDENT","INCREMENT_ATTENDANCE","DECREMENT_ATTENDANCE","TOGGLE_ORDER_NOTES","RESET","SET_BEHAVIOURS","get_student","payload","type","increment_attendance","decrement_attendance","reset","order_notes","set_behaviours","average","notes","decimal","length","Math","floor","reduce","curr","acc","deepCopyStudents","state","students","map","s","setMention","attentance","getMention","student","behaviors","get","id","attendance"],"mappings":";;;;;;;AAAA,SACEA,WADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,kBAJF,EAKEC,KALF,EAMEC,cANF;AASA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAa;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAER,WADD;AAELO,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACF,OAAD,EAAa;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAEP,oBADD;AAELM,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACH,OAAD,EAAa;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAEN,oBADD;AAELK,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzB,SAAO;AACLH,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,GAAM;AAE/B,SAAO;AAAEJ,IAAAA,IAAI,EAAEL;AAAR,GAAP;AACD,CAHM;AAKP,OAAO,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAElC,SAAO;AAAEL,IAAAA,IAAI,EAAEH;AAAR,GAAP;AACD,CAHM;;AAOP,IAAMS,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAA0B;AAAA,MAAlBC,OAAkB,uEAAR,GAAQ;AACxC,MAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB,OAAO,IAAP;AAExB,SACEC,IAAI,CAACC,KAAL,CACGJ,KAAK,CAACK,MAAN,CAAa,UAACC,IAAD,EAAOC,GAAP;AAAA,WAAeD,IAAI,GAAGC,GAAtB;AAAA,GAAb,IAA0CP,KAAK,CAACE,MAAjD,GAA2DD,OAD7D,IAEIA,OAHN;AAKD,CARD;;AAUA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD;AAAA,SAGvBA,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmB,UAACC,CAAD;AAAA,2CAAaA,CAAb;AAAgBZ,MAAAA,KAAK,qBAAMY,CAAC,CAACZ,KAAR;AAArB;AAAA,GAAnB,CAHuB;AAAA,CAAzB;;AAKA,IAAMa,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAgB;AACjC,UAAQ,IAAR;AACE,SAAKA,UAAU,KAAK,CAApB;AACE,aAAO,GAAP;;AAEF,SAAKA,UAAU,IAAI,CAAd,IAAmBA,UAAU,IAAI,CAAtC;AACE,aAAO,GAAP;;AAEF,SAAKA,UAAU,IAAI,CAAd,IAAmBA,UAAU,IAAI,CAAtC;AACE,aAAO,GAAP;;AAEF;AACE,aAAO,GAAP;AAXJ;AAaD,CAdD;;AAkBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAUC,SAAV,EAAwB;AAAA;;AAGzC,2BAAOA,SAAS,CAACC,GAAV,CAAcF,OAAO,CAACG,EAAtB,CAAP,6BAAqCH,OAAO,CAACI,UAAR,KAAuB,CAAvB,GAA2B,GAA3B,GAAiC,gBAAtE;AACD,CAJD;;AAMA,SAASrB,OAAT,EAAkBS,gBAAlB,EAAoCK,UAApC,EAAgDE,UAAhD","sourcesContent":["import {\n  GET_STUDENT,\n  INCREMENT_ATTENDANCE,\n  DECREMENT_ATTENDANCE,\n  TOGGLE_ORDER_NOTES,\n  RESET,\n  SET_BEHAVIOURS\n} from \"../constants/actions\";\n\nexport const get_student = (payload) => {\n  return {\n    type: GET_STUDENT,\n    payload,\n  };\n};\n\nexport const increment_attendance = (payload) => {\n  return {\n    type: INCREMENT_ATTENDANCE,\n    payload,\n  };\n};\n\nexport const decrement_attendance = (payload) => {\n  return {\n    type: DECREMENT_ATTENDANCE,\n    payload,\n  };\n};\n\nexport const reset = () => {\n  return {\n    type: RESET,\n  };\n};\n\nexport const order_notes = () => {\n\n  return { type: TOGGLE_ORDER_NOTES };\n}\n\nexport const set_behaviours = () => {\n\n  return { type: SET_BEHAVIOURS };\n}\n\n// les notes et la partie décimale pour la précision\n// 100 => deux chiffres après la virgule\nconst average = (notes, decimal = 100) => {\n  if (notes.length === 0) return null;\n\n  return (\n    Math.floor(\n      (notes.reduce((curr, acc) => curr + acc) / notes.length) * decimal\n    ) / decimal\n  );\n};\n\nconst deepCopyStudents = (state) =>\n  // on fait une copie de chaque student dans le littéral students du state\n  // pensez bien dans les arrow function à retourner le littéral dans une expression ()\n  state.students.map((s) => ({ ...s, notes: [...s.notes] }));\n\nconst setMention = (attentance) => {\n  switch (true) {\n    case attentance === 0:\n      return 'A';\n\n    case attentance >= 1 && attentance <= 2:\n      return 'B';\n\n    case attentance >= 3 && attentance <= 5:\n      return 'C';\n\n    default:\n      return 'D';\n  }\n}\n\n// En fonction des données, il faudrait peut être revoir la structure pour les abscences.\n// Pour l'instant pour la gestion des abscences on les fait dans la clé du littéral behaviors\nconst getMention = (student, behaviors) => {\n\n  // si non faux ?? et sinon ( on fait ce qu'il y a dans le ternaire )\n  return behaviors.get(student.id) ?? (student.attendance === 0 ? 'A' : 'Aucune mention');\n}\n\nexport { average, deepCopyStudents, setMention, getMention };"]},"metadata":{},"sourceType":"module"}