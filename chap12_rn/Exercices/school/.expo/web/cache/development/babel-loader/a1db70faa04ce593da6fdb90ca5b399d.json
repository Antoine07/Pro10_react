{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_STUDENT, INCREMENT_ATTENDANCE, DECREMENT_ATTENDANCE, TOGGLE_ORDER_NOTES, RESET, SET_BEHAVIOURS } from \"../constants/actions\";\nimport { deepCopyStudents, average, setMention } from \"../actions/actions-types\";\nvar stateInit = {\n  students: [{\n    id: 1,\n    name: \"Alice\",\n    lessons: [1, 2],\n    attendance: 0,\n    notes: [11, 12, 18]\n  }, {\n    id: 2,\n    name: \"Alan\",\n    lessons: [3],\n    attendance: 0,\n    notes: [10, 14.5, 11]\n  }, {\n    id: 3,\n    name: \"Phil\",\n    lessons: [1, 2, 3],\n    attendance: 0,\n    notes: [11, 9, 9]\n  }, {\n    id: 4,\n    name: \"Naoudi\",\n    lessons: [1],\n    attendance: 0,\n    notes: [14.5, 19, 18]\n  }, {\n    id: 5,\n    name: \"Fenley\",\n    lessons: [3],\n    attendance: 0,\n    notes: [9, 7, 11]\n  }],\n  lessons: [{\n    id: 1,\n    title: \"React\"\n  }, {\n    id: 2,\n    title: \"React Native\"\n  }, {\n    id: 3,\n    title: \"MongoDB\"\n  }],\n  behaviours: new Map(),\n  order: false,\n  student: null\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stateInit;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newStudents = null,\n      newStudent = null;\n\n  switch (action.type) {\n    case GET_STUDENT:\n      var student = state.students.find(function (s) {\n        return action.payload === s.id;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        student: _objectSpread(_objectSpread({}, student), {}, {\n          notes: _toConsumableArray(student.notes)\n        })\n      });\n\n    case INCREMENT_ATTENDANCE:\n    case DECREMENT_ATTENDANCE:\n      newStudents = deepCopyStudents(state);\n      var behaviours = new Map(Array.from(state.behaviours.entries()));\n\n      for (var _iterator = _createForOfIteratorHelperLoose(newStudents), _step; !(_step = _iterator()).done;) {\n        var _student = _step.value;\n\n        if (_student.id === action.payload) {\n          if (action.type === INCREMENT_ATTENDANCE) _student.attendance++;\n          if (action.type === DECREMENT_ATTENDANCE && _student.attendance >= 0) _student.attendance--;\n          newStudent = _student;\n          behaviours.set(_student.id, setMention(_student.attendance));\n          break;\n        }\n\n        ;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        students: newStudents,\n        student: newStudent,\n        behaviours: behaviours\n      });\n\n    case RESET:\n      newStudents = deepCopyStudents(state);\n      newStudents.map(function (student) {\n        student.attendance = 0;\n        return student;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        students: newStudents\n      });\n\n    case TOGGLE_ORDER_NOTES:\n      newStudents = deepCopyStudents(state);\n      var sens = state.order === true ? 1 : -1;\n      newStudents.sort(function (a, b) {\n        return sens * (average(a.notes) - average(b.notes));\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        students: newStudents,\n        order: !state.order\n      });\n\n    case SET_BEHAVIOURS:\n      newStudents = deepCopyStudents(state);\n      var newBehaviours = new Map();\n      newStudents.map(function (student) {\n        newBehaviours.set(student.id, setMention(student.attendance));\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        behaviours: newBehaviours\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/antoinelucsko/Desktop/COURS/3WA/Pro10_react/chap12_rn/Exercices/school/reducers/school.js"],"names":["GET_STUDENT","INCREMENT_ATTENDANCE","DECREMENT_ATTENDANCE","TOGGLE_ORDER_NOTES","RESET","SET_BEHAVIOURS","deepCopyStudents","average","setMention","stateInit","students","id","name","lessons","attendance","notes","title","behaviours","Map","order","student","reducer","state","action","newStudents","newStudent","type","find","s","payload","Array","from","entries","set","map","sens","sort","a","b","newBehaviours"],"mappings":"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","sourcesContent":["import {\n  GET_STUDENT,\n  INCREMENT_ATTENDANCE,\n  DECREMENT_ATTENDANCE,\n  TOGGLE_ORDER_NOTES,\n  RESET,\n  SET_BEHAVIOURS\n} from \"../constants/actions\";\n\nimport { deepCopyStudents, average, setMention } from '../actions/actions-types';\n\nconst stateInit = {\n  students: [\n    {\n      id: 1,\n      name: \"Alice\",\n      lessons: [1, 2],\n      attendance: 0,\n      notes: [11, 12, 18],\n    },\n    { id: 2, name: \"Alan\", lessons: [3], attendance: 0, notes: [10, 14.5, 11] },\n    {\n      id: 3,\n      name: \"Phil\",\n      lessons: [1, 2, 3],\n      attendance: 0,\n      notes: [11, 9, 9],\n    },\n    {\n      id: 4,\n      name: \"Naoudi\",\n      lessons: [1],\n      attendance: 0,\n      notes: [14.5, 19, 18],\n    },\n    { id: 5, name: \"Fenley\", lessons: [3], attendance: 0, notes: [9, 7, 11] },\n  ],\n  lessons: [\n    { id: 1, title: \"React\" },\n    { id: 2, title: \"React Native\" },\n    { id: 3, title: \"MongoDB\" },\n  ],\n  behaviours: new Map(),\n  order: false,\n  student: null\n};\n\nconst reducer = (state = stateInit, action) => {\n  let newStudents = null, newStudent = null;\n  switch (action.type) {\n\n    case GET_STUDENT:\n      const student = state.students.find((s) => action.payload === s.id);\n\n      return {\n        ...state,\n        student: { ...student, notes: [...student.notes] },\n      };\n\n    case INCREMENT_ATTENDANCE:\n    case DECREMENT_ATTENDANCE:\n      // copie profonde de l'objet students dans le state\n      newStudents = deepCopyStudents(state);\n\n      // Pour faire une copie du Map\n      // Array.from prenne les clé/valeur du Map pour le transformer en tableau de tableau\n      // Puis à partir de ce tableau de tableau on crée un Map.\n      const behaviours = new Map( Array.from( state.behaviours.entries() ));\n\n      for(const student of newStudents){\n        // les objets student (même ref) ne sont pas des copies donc si vous les modifiez\n        // ils le seront également dans newStudents \n        if (student.id === action.payload) {\n          if( action.type === INCREMENT_ATTENDANCE ) student.attendance++;\n          if( action.type === DECREMENT_ATTENDANCE && student.attendance >= 0 ) student.attendance--;\n          newStudent = student;\n          behaviours.set(student.id, setMention(student.attendance));\n\n          break; // refacto optimisation\n        };\n      }\n\n      return {\n        ...state,\n        students: newStudents,\n        student: newStudent,\n        behaviours : behaviours\n      };\n\n    case RESET:\n      newStudents = deepCopyStudents(state);\n      newStudents.map(student => {\n        student.attendance = 0;\n\n        return student;\n      })\n\n      return {\n        ...state,\n        students: newStudents // forcera la mise à jour du state car nouvel objet\n      }\n\n    case TOGGLE_ORDER_NOTES:\n      newStudents = deepCopyStudents(state);\n      const sens = state.order === true ? 1 : - 1;\n      // array.sort((a, b) => a - b)\n      // newStudents.sort((a, b) => (average(a.notes) - average(b.notes) >= 0 ? (1 * sens) : (-1 * sens) ) );\n      newStudents.sort((a, b) => sens * (average(a.notes) - average(b.notes)  ) );\n      \n      return {\n        ...state,\n        students: newStudents,\n        order: !state.order\n      }\n\n    case SET_BEHAVIOURS:\n      newStudents = deepCopyStudents(state);\n\n      const newBehaviours = new Map();\n\n      newStudents.map( student =>{\n        newBehaviours.set(student.id, setMention(student.attendance));\n      });\n\n      return {\n        ...state,\n        behaviours : newBehaviours\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}